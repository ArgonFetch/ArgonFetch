
from urllib.parse import urlparse
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import os

from enums.audio_content_type import ContentType
from models.music_information import MusicInformation
from models.playlist_information import PlaylistInformation
from platform_handlers import content_type_identifyer, platform_identifyer

async def fetch_playlist_information(query):
    client_credentials_manager = SpotifyClientCredentials(client_id=os.getenv('SPOTIFY_CLIENT_ID'), client_secret=os.getenv('SPOTIFY_CLIENT_SECRET'))
    sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)
    
    parse_result = urlparse(query)
    path = parse_result.path
    path_segments = path.strip("/").split("/")
    content_id = path_segments[-1]

    platform = await platform_identifyer.identify(query)
    audio_content_type = await content_type_identifyer.identify(query, platform)

    if audio_content_type is ContentType.PLAYLIST:
        content = sp.playlist(content_id)
        songs = [
            MusicInformation(
                streaming_url=item['track']['external_urls']['spotify'],
                song_name=item['track']['name'],
                author=', '.join([artist['name'] for artist in item['track']['artists']]),
                image_url=item['track']['album']['images'][0]['url'] if item['track']['album']['images'] else ''
            )
            for item in content['tracks']['items']
        ]
        return PlaylistInformation(
            playlist_name=content['name'],
            author=content['owner']['display_name'],
            image_url=content['images'][0]['url'] if content['images'] else '',
            songs=songs
        )
    
import asyncio

async def main():
    result = await fetch_playlist_information("https://open.spotify.com/playlist/32ifvC0x9uoteR08WHU6Ot?si=297f9ee9744148fd")
    print(result)

asyncio.run(main())