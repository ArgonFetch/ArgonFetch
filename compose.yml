services:
  postgres:
    image: postgres:15
    container_name: argonfetch-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-argonfetch}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-argonfetch123}
      POSTGRES_DB: ${POSTGRES_DB:-argonfetch}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-argonfetch}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  argonfetch:
    image: ghcr.io/argonfetch/argonfetch:latest
    # Alternative images:
    # image: docker.io/pianonic/argonfetch:latest
    container_name: argonfetch
    environment:
      # Database Configuration
      ConnectionStrings__ArgonFetchDatabase: "Host=postgres;Port=5432;Database=${POSTGRES_DB:-argonfetch};Username=${POSTGRES_USER:-argonfetch};Password=${POSTGRES_PASSWORD:-argonfetch123}"

      # Spotify Configuration
      Spotify__ClientId: ${SPOTIFY_CLIENT_ID}
      Spotify__ClientSecret: ${SPOTIFY_CLIENT_SECRET}

      # ASP.NET Core Configuration
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
      ASPNETCORE_URLS: "http://+:8080"
    ports:
      - "${APP_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - media_storage:/app/media
    restart: unless-stopped

volumes:
  postgres_data:
  media_storage: